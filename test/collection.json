{
  "variables": [],
  "info": {
    "name": "Auth REST Service",
    "_postman_id": "96f9f5ed-e30f-1031-f31e-a90bc510a0f6",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "[Auth] Get access token",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 201;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const token = JSON.parse(responseBody);",
              "tests[\"Access granted\"] = !!token.accessToken;",
              "",
              "/**",
              " * Store data",
              " */",
              "postman.setEnvironmentVariable('accessToken', token.accessToken);",
              "postman.setEnvironmentVariable('refreshToken', token.refreshToken);",
              "postman.setEnvironmentVariable('adminUserId', token.userId);",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/token",
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "username",
              "value": "admin@test.com",
              "type": "text",
              "enabled": true
            },
            {
              "key": "password",
              "value": "test",
              "type": "text",
              "enabled": true
            },
            {
              "key": "grant_type",
              "value": "password",
              "type": "text",
              "enabled": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Refresh token",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 201;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const token = JSON.parse(responseBody);",
              "tests[\"Refresh token\"] = !!token.accessToken;",
              "",
              "/**",
              " * Store data",
              " */",
              "postman.setEnvironmentVariable('accessToken', token.accessToken);",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/token",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/x-www-form-urlencoded",
            "description": ""
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "grant_type",
              "value": "refresh_token",
              "type": "text",
              "enabled": true
            },
            {
              "key": "refresh_token",
              "value": "{{refreshToken}}",
              "type": "text",
              "enabled": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Create service user",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 201;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const user = JSON.parse(responseBody);",
              "tests['User created'] = user.id !== '';",
              "tests['User type'] = user.type === 'service';",
              "",
              "/**",
              " * Store data",
              " */",
              "postman.setEnvironmentVariable('testUserId', user.id);",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"service@test.com\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"Service\",\n    \"password\": \"test\",\n    \"type\": \"service\"\n}"
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Get access token for service user",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 201;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const token = JSON.parse(responseBody);",
              "tests[\"Access granted\"] = !!token.accessToken;",
              "tests[\"Token expire date\"] = new Date(token.expire).getTime() > new Date().getTime() + 300*24*60*60*1000;",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/token",
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "username",
              "value": "service@test.com",
              "type": "text",
              "enabled": true,
              "warning": ""
            },
            {
              "key": "password",
              "value": "test",
              "type": "text",
              "enabled": true,
              "warning": ""
            },
            {
              "key": "grant_type",
              "value": "password",
              "type": "text",
              "enabled": true,
              "warning": ""
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Delete service user",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 204;",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users/{{testUserId}}",
        "method": "DELETE",
        "header": [
          {
            "key": "//Content-Type",
            "value": "application/json",
            "description": "",
            "disabled": true
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Create user",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 201;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const user = JSON.parse(responseBody);",
              "tests['User created'] = user.id !== '';",
              "tests['User type'] = user.type === 'user';",
              "",
              "/**",
              " * Store data",
              " */",
              "postman.setEnvironmentVariable('testUserId', user.id);",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"user@test.com\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"password\": \"test\"\n}"
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] User list",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 200;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const users = JSON.parse(responseBody);",
              "tests['User list'] = Array.isArray(users) && users[0].id !== '';",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users",
        "method": "GET",
        "header": [
          {
            "key": "//Content-Type",
            "value": "application/json",
            "description": "",
            "disabled": true
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"sergey@hope.ua\",\n    \"firstName\": \"Sergey\",\n    \"lastName\": \"Sadovoi\",\n    \"password\": \"Krevedko\"\n}"
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Give permissions",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 200;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const user = JSON.parse(responseBody);",
              "const group = postman.getEnvironmentVariable('service.group');",
              "tests[\"Permissions #1\"] = user.permissions[group].service['role:one'] === 'string';",
              "tests[\"Permissions #2\"] = Array.isArray(user.permissions[group].service['role:two']);",
              "tests[\"Permissions #3\"] = user.permissions[group].service['role:three'] === true;",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users/{{testUserId}}/permissions",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"{{service.group}}\": {\n    \"service\": {\n      \"role:one\": \"string\",\n      \"role:two\": [\n        \"array1\",\n        \"array2\",\n        \"array3\"\n      ],\n      \"role:three\": true\n    }\n  }\n}"
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] User single",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 200;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const user = JSON.parse(responseBody);",
              "tests['User single'] = user.id !== '';",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users/{{testUserId}}",
        "method": "GET",
        "header": [
          {
            "key": "//Content-Type",
            "value": "application/json",
            "description": "",
            "disabled": true
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"sergey@hope.ua\",\n    \"firstName\": \"Sergey\",\n    \"lastName\": \"Sadovoi\",\n    \"password\": \"Krevedko\"\n}"
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Delete user",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 204;",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users/{{testUserId}}",
        "method": "DELETE",
        "header": [
          {
            "key": "//Content-Type",
            "value": "application/json",
            "description": "",
            "disabled": true
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "description": ""
      },
      "response": []
    },
    {
      "name": "[Auth] Get self",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * Check status and headers",
              " */ ",
              "tests['Status code'] = responseCode.code === 200;",
              "",
              "/**",
              " * Check response body",
              " */ ",
              "const user = JSON.parse(responseBody);",
              "const adminUserId = postman.getEnvironmentVariable('adminUserId');",
              "tests[\"Get self\"] = user.id === adminUserId;",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{auth.host}}/v1/users/self",
        "method": "GET",
        "header": [
          {
            "key": "//Content-Type",
            "value": "application/json",
            "description": "",
            "disabled": true
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": []
        },
        "description": ""
      },
      "response": []
    }
  ]
}